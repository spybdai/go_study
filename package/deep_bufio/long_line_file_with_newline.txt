line1#####At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needed
line2#####At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededline2At this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as neededAt this point, we have interactive control, the script is running in the background, and we can do something else while it finishes. When it is done, the shell will send us a notice. If you want to bring it back to the foreground, use the fg command. Then, you are back where you started, waiting for it to finish. Generally, you would only use the fg command, if you have multiple background jobs running, and want to interact with one of them. You could theoretically have a text editor, a compile, and a long running script all running as jobs and swap them in and out as needed
line3#####test

